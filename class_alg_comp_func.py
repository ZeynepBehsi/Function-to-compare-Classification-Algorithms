# -*- coding: utf-8 -*-
"""Class_Alg_Comp_Func.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xWt_VxP9CilXkAnZRNgSD-AS2x4OmKIa
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

def compare_classification_algorithms(data, target_column):
    # Splits the dataset into features and target variable
    X = data.drop(columns=[target_column])
    y = data[target_column]

    # Divides data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

    # Defines classification algorithms
    classifiers = {
        "Logistic Regression": LogisticRegression(),
        "SVC, Linear": SVC(kernel = "linear"),
        "SVC, RBF": SVC(kernel = "rbf"),
        "K-NN": KNeighborsClassifier(),
        "Decision Tree": DecisionTreeClassifier(),
        "Random Forest": RandomForestClassifier(n_estimators=5),
        "Naive Bayes": GaussianNB(),

    }

    # Creates list to hide results
    results_list = []

    # Trains and predicts for each classifier and adds the results to results_list
    for name, classifier in classifiers.items():
        classifier.fit(X_train, y_train)
        y_pred = classifier.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        confusion_mat = confusion_matrix(y_test, y_pred)
        results_list.append({
            "Algorithm": name,
            "Accuracy": accuracy,
            "Confusion Matrix": confusion_mat
        })

    # Ranks algorithm performances from high to low
    results_list = sorted(results_list, key=lambda x: x["Accuracy"], reverse=True)

    # Converts the results into a DataFrame
    results_df = pd.DataFrame(results_list)

    return results_df


# Here "data" represents the dataset and "target_column" represents the column name of the target variable

"""# Example of the implementation of the function"""

from sklearn.datasets import load_iris

# Import Iris dataset from sklearn
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['target'] = iris.target

# Compare Classification Algorithms on the dataset by defined function
results = compare_classification_algorithms(iris_df, 'target')
print(results)

